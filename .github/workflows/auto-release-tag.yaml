name: Auto Release Tag and PRs
run-name: Tag and Create PR for ${{ github.head_ref }}
on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  tag_and_create_pr:
    permissions:
      contents: write
      pull-requests: write
    if: github.event.pull_request.merged == true && (contains(github.head_ref, 'release') || contains(github.head_ref, 'hotfix'))
    runs-on: ubuntu-latest

    steps:
      # リポジトリをチェックアウト
      - uses: actions/checkout@v4

      # タグをプッシュ
      - name: Push Tag
        run: |
          release_branch=${{ github.head_ref }}
          version=$(echo $release_branch | awk -F/ '{print $2}')
          git tag ${version}
          git push origin ${version}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # タグ情報を抽出
      - name: Extract Tag Information
        run: |
          TAG_NAME=${{ github.head_ref }}
          TAG_COMMIT=$(git rev-parse HEAD)
          HOTFIX_VERSION=${TAG_NAME#v}
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "TAG_COMMIT=${TAG_COMMIT}" >> $GITHUB_ENV
          echo "HOTFIX_VERSION=${HOTFIX_VERSION}" >> $GITHUB_ENV

      # タグ形式を検証 (Hotfixタグかどうか)
      - name: Validate Hotfix Tag
        id: validate
        run: |
          TAG_NAME=${{ env.TAG_NAME }}
          echo "Validating tag: $TAG_NAME"

          # 正規表現でHotfixタグを検証（vX.Y.Z形式かつZ(パッチバージョン)が0以外）
          if [[ ! "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[1-9][0-9]*$ ]]; then
            echo "Tag $TAG_NAME is not a valid Hotfix tag. Skipping."
            exit 0
          fi

      # DevelopブランチへのPRを作成
      - name: Create PR to Develop
        if: steps.validate.outcome == "success"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --base develop \
            --head ${{ env.TAG_COMMIT }} \
            --title "Hotfix: Merge ${{ env.TAG_NAME }} into Develop" \
            --body "This PR merges the hotfix tagged as ${{ env.TAG_NAME }} into the develop branch."

      # 他のHotfixブランチへのPRを作成
      - name: Create PR to Next Hotfix Branch
        if: steps.validate.outcome == "success"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOTFIX_VERSION: ${{ env.HOTFIX_VERSION }}
          HOTFIX_TAG: ${{ env.TAG_NAME }}
        run: |
          HOTFIX_BRANCHES=$(git branch -r | grep -E 'origin/hotfix/v[0-9]+\.[0-9]+\.[0-9]+' | sed 's/origin\///')
          echo "Hotfix branches found: $HOTFIX_BRANCHES"

          NEXT_HOTFIX_BRANCH=""
          for BRANCH in $HOTFIX_BRANCHES; do
            BRANCH_VERSION=${BRANCH#hotfix/v}
            if [[ $(echo -e "$HOTFIX_VERSION\n$BRANCH_VERSION" | sort -V | tail -n 1) == "$BRANCH_VERSION" ]] && [[ "$HOTFIX_VERSION" != "$BRANCH_VERSION" ]]; then
              NEXT_HOTFIX_BRANCH=$BRANCH
              break
            fi
          done

          if [[ -n "$NEXT_HOTFIX_BRANCH" ]]; then
            gh pr create \
              --base $NEXT_HOTFIX_BRANCH \
              --head ${{ env.TAG_COMMIT }} \
              --title "Hotfix: Merge ${{ env.TAG_NAME }} into $NEXT_HOTFIX_BRANCH" \
              --body "This is an automated PR to merge hotfix changes into the $NEXT_HOTFIX_BRANCH branch."
          fi

      # リリースブランチへのPRを作成
      - name: Create PRs to Release Branches
        if: steps.validate.outcome == "success"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOTFIX_VERSION: ${{ env.HOTFIX_VERSION }}
          HOTFIX_TAG: ${{ env.TAG_NAME }}
        run: |
          RELEASE_BRANCHES=$(git branch -r | grep -E 'origin/release/v[0-9]+\.[0-9]+\.[0-9]+' | sed 's/origin\///')
          echo "Release branches found: $RELEASE_BRANCHES"

          for RELEASE_BRANCH in $RELEASE_BRANCHES; do
            RELEASE_VERSION=${RELEASE_BRANCH#release/v}

            if [[ $(echo -e "$HOTFIX_VERSION\n$RELEASE_VERSION" | sort -V | tail -n 1) == "$RELEASE_VERSION" ]] && [[ "$HOTFIX_VERSION" != "$RELEASE_VERSION" ]]; then
              gh pr create \
                --base $RELEASE_BRANCH \
                --head ${{ env.TAG_COMMIT }} \
                --title "Hotfix: Merge ${{ env.TAG_NAME }} into $RELEASE_BRANCH" \
                --body "This is an automated PR to merge hotfix changes into the $RELEASE_BRANCH branch."
            fi
          done